
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/integrations/supabase/client";

const files = [
  {
    id: 1,
    name: "system_update.exe",
    behavior: "Modifies system registry keys",
    processUsage: "High CPU and memory usage",
    origin: "Unknown source",
    permissions: "Requests admin access",
    isMalicious: true,
  },
  {
    id: 2,
    name: "chrome_browser.exe",
    behavior: "Normal web browsing activity",
    processUsage: "Standard browser usage",
    origin: "Google LLC",
    permissions: "Standard user permissions",
    isMalicious: false,
  },
  {
    id: 3,
    name: "antivirus_free.exe",
    behavior: "Creates hidden files in system directory",
    processUsage: "Runs multiple background processes",
    origin: "Unverified publisher",
    permissions: "Full system access",
    isMalicious: true,
  },
  {
    id: 4,
    name: "calculator.exe",
    behavior: "Basic calculation operations",
    processUsage: "Minimal resource usage",
    origin: "Microsoft Corporation",
    permissions: "Basic user access",
    isMalicious: false,
  },
  {
    id: 5,
    name: "game_crack.exe",
    behavior: "Disables system security",
    processUsage: "Variable resource usage",
    origin: "Unknown",
    permissions: "System level access",
    isMalicious: true,
  }
];

export default function MalwareHunter() {
  const [selectedFiles, setSelectedFiles] = useState<number[]>([]);
  const [completed, setCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    checkUser();
  }, []);

  const checkUser = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      navigate("/auth");
    }
  };

  const toggleFileSelection = (fileId: number) => {
    setSelectedFiles(prev => 
      prev.includes(fileId)
        ? prev.filter(id => id !== fileId)
        : [...prev, fileId]
    );
  };

  const handleSubmit = async () => {
    const maliciousFiles = files.filter(f => f.isMalicious).map(f => f.id);
    const correctSelections = selectedFiles.filter(id => 
      maliciousFiles.includes(id)
    ).length;
    const incorrectSelections = selectedFiles.filter(id => 
      !maliciousFiles.includes(id)
    ).length;
    
    const finalScore = Math.max(0, correctSelections - incorrectSelections);

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) return;

    const { error } = await supabase
      .from("user_progress")
      .upsert({
        user_id: session.user.id,
        level_id: 3,
        score: finalScore,
        completed: true,
      });

    if (error) {
      console.error("Error updating progress:", error);
      return;
    }

    setScore(finalScore);
    setCompleted(true);
    
    toast({
      title: "Level Complete!",
      description: `You scored ${finalScore} points!`,
    });
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-4xl mx-auto">
        <Card>
          <CardHeader>
            <CardTitle>Level 3: Malware Hunter</CardTitle>
          </CardHeader>
          <CardContent>
            {completed ? (
              <div className="text-center space-y-4">
                <h2 className="text-xl font-bold">Level Complete!</h2>
                <p>You scored {score} points!</p>
                <Button onClick={() => navigate("/dashboard")}>
                  Return to Dashboard
                </Button>
              </div>
            ) : (
              <div className="space-y-6">
                <p className="text-gray-600">
                  Select all files that you think are malicious based on their behavior and characteristics.
                </p>
                <div className="grid gap-4 md:grid-cols-2">
                  {files.map((file) => (
                    <Card
                      key={file.id}
                      className={`cursor-pointer transition-colors ${
                        selectedFiles.includes(file.id)
                          ? "border-blue-500"
                          : ""
                      }`}
                      onClick={() => toggleFileSelection(file.id)}
                    >
                      <CardContent className="p-4">
                        <h3 className="font-bold mb-2">{file.name}</h3>
                        <ul className="space-y-1 text-sm">
                          <li><strong>Behavior:</strong> {file.behavior}</li>
                          <li><strong>Process Usage:</strong> {file.processUsage}</li>
                          <li><strong>Origin:</strong> {file.origin}</li>
                          <li><strong>Permissions:</strong> {file.permissions}</li>
                        </ul>
                      </CardContent>
                    </Card>
                  ))}
                </div>
                <Button className="w-full" onClick={handleSubmit}>
                  Submit Analysis
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
